1. Write a program containing a possible exception. Use a try block to throw it and a catch block
to handle it promptly.
Ans= import java.util.Scanner;
public class excp {
	public static void main(String args[]) {
		Scanner sc= new Scanner(System.in);
		try {
			int a= sc.nextInt();
			int b= sc.nextInt();
			System.out.println(a/b);
		}
		
		catch(ArithmeticException e) {
			System.out.println(e);
			System.out.println("Try with different number");
	}
		
	sc.close();
	}

}
Input=  5
	0
output= java.lang.ArithmeticException: / by zero
	Try with different number

2. Write a program that illustrates the application of multiple catch statements.
Ans = public class excpt {

	public static void main(String[] args) {
		 try{    
             int a[]=new int[5];    
             a[5]=1000000/1;    
            }    
            catch(ArithmeticException e)  
               {  
                System.out.println("Arithmetic Exception occurs");  
               }    
            catch(ArrayIndexOutOfBoundsException e)  
               {  
                System.out.println("ArrayIndexOutOfBounds Exception occurs");  
               }    
            catch(Exception e)  
               {  
                System.out.println("Parent Exception occurs");  
               }             

	}

}

Output= ArrayIndexOutOfBounds Exception occurs

3. Write a program that demonstrates how certain exception types are not allowed to be thrown.
Ans=    package assignment3;
 	public class excpti extends Exception {
	public excpti(String m) {
	super(m);
	}
	public static int add(int a, int b)throws Exception
	{
		if(a==b)
			throw new excpti("not allowed");
		else
			return(a+b);
	}
	public static void main(String[] args)
	{
		try {
			System.out.println(add(10,10));
		}
		catch(Exception e) {
			System.out.println(e);
		}
	}
}

Output= assignment3.excpti: not allowed

4. Write a program to demonstrate the concept of re-throwing an exception.
Ans= public class excptio {

	public static void main(String[] args) {
		try {
			int result = 100/0;
			System.out.println("Result= "+result);
			
		}
		catch(ArithmeticException e) {
			System.out.println(e);
			System.out.println("not divisible");
		}
		divide(10,0);

	}
	public static int divide(int num1, int num2) throws ArithmeticException{
		try {
			return(num1/num2);
		}
		catch(ArithmeticException e) {
			System.out.println(e);
			System.out.println("please check and change th numbers");
		}
		return(0);
	}

}

Output= 
java.lang.ArithmeticException: / by zero
not divisible
java.lang.ArithmeticException: / by zero
please check and change th numbers


5. You will be given two integers and as input, you have to compute x/y. If x and y are not 32 bit
signed integers or if y is zero, exception will occur and you have to report it. Read sample
Input/Output to know what to report in case of exceptions. 

Ans= import java.util.InputMismatchException;
import java.util.Scanner;
public class excption {

	public static void main(String[] args) {
		Scanner sc= new Scanner(System.in);
		try {
		int x= sc.nextInt();
		int y= sc.nextInt();
		System.out.println(x/y);
	}
		catch(ArithmeticException e) {
			System.out.println(e);
		}
		catch(InputMismatchException e){
			System.out.println(e.getClass().toString().replaceFirst("class ", ""));
		}
sc.close();
		}
}


Input 1= 10
	  3
Output 1= 3

Input 2= 10
	 hello
Output 2=  java.util.InputMismatchException
